"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[257],{1814:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"setup/backup","title":"Backup and Restore","description":"Database backup and restore is actually a function of the Komodo CLI,","source":"@site/docs/setup/backup.md","sourceDirName":"setup","slug":"/setup/backup","permalink":"/docs/setup/backup","draft":false,"unlisted":false,"editUrl":"https://github.com/moghtech/komodo/tree/main/docsite/docs/setup/backup.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Connect More Servers","permalink":"/docs/setup/connect-servers"},"next":{"title":"Advanced Configuration","permalink":"/docs/setup/advanced"}}');var s=o(4848),a=o(8453);const r={},c="Backup and Restore",i={},d=[{value:"Backups",id:"backups",level:2},{value:"Remote Backups",id:"remote-backups",level:2},{value:"Restore",id:"restore",level:2},{value:"Consistency",id:"consistency",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"backup-and-restore",children:"Backup and Restore"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Database backup and restore is actually a function of the ",(0,s.jsx)(n.a,{href:"../ecosystem/cli",children:"Komodo CLI"}),",\nwhich is packaged in with the Komodo Core image for convenience."]})}),"\n",(0,s.jsxs)(n.p,{children:["Starting from ",(0,s.jsx)(n.strong,{children:"v1.19.0"}),", new Komodo installs will automatically create the\n",(0,s.jsx)(n.strong,{children:"Backup Core Database"})," ",(0,s.jsx)(n.a,{href:"../resources/procedures#procedures",children:"Procedure"}),", scheduled daily.\nIf you don't have it, this is the Toml:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'[[procedure]]\nname = "Backup Core Database"\ndescription = "Triggers the Core database backup at the scheduled time."\ntags = ["system"]\nconfig.schedule = "Every day at 01:00"\n\n[[procedure.config.stage]]\nname = "Stage 1"\nenabled = true\nexecutions = [\n  { execution.type = "BackupCoreDatabase", execution.params = {}, enabled = true }\n]\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["You are also able to integrate ",(0,s.jsx)(n.code,{children:"BackupCoreDatabase"})," into other Procedures, for example to trigger\nthis process before launching a backup container. There is nothing special about this Procedure,\nit's just created by default for guidance / convenience."]})}),"\n",(0,s.jsx)(n.h2,{id:"backups",children:"Backups"}),"\n",(0,s.jsxs)(n.p,{children:["When Komodo takes a database backup, it creates a ",(0,s.jsx)(n.strong,{children:"folder named for the time the backup was taken"}),",\nand dumps the gzip-compressed documents to files in this folder.\nIn order to store the backups to disk, ",(0,s.jsxs)(n.strong,{children:["mount a host path to ",(0,s.jsx)(n.code,{children:"/backups"})]})," in the Komodo Core container."]}),"\n",(0,s.jsxs)(n.p,{children:["Due to its larger size and relative unimportance, the ",(0,s.jsx)(n.code,{children:"Stats"})," collection (containing historical server cpu / mem / disk usage)\nis not included in dated backups. Just latest Stats are maintained at the top level of the backup folder."]}),"\n",(0,s.jsxs)(n.p,{children:["In order to prevent unbounded growth, the backup process implements a pruning feature which will ensure\nonly the most recent 14 backup folders are kept. To change this number, set ",(0,s.jsx)(n.code,{children:"max_backups"})," (",(0,s.jsx)(n.code,{children:"KOMODO_CLI_MAX_BACKUPS"}),")\nin ",(0,s.jsx)(n.code,{children:"core.config.toml"}),", ",(0,s.jsx)(n.code,{children:"komodo.cli.toml"}),", or in the Core container environment."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"# Folder structure\n/backups\n| 2025-08-12_03-00-01\n| | Action.gz\n| | Alerter.gz\n| | ...\n| 2025-08-13_03-00-01\n| 2025-08-14_03-00-01\n| ...\n| Stats.gz\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:"Currently no encryption is supported,\nso you may want to encrypt the files before backing up remotely if your backup solution doesn't support that natively."})}),"\n",(0,s.jsx)(n.h2,{id:"remote-backups",children:"Remote Backups"}),"\n",(0,s.jsxs)(n.p,{children:["Since database backup is actually a function of the ",(0,s.jsx)(n.a,{href:"../ecosystem/cli",children:"Komodo CLI"}),", you can also backup directly to\na remote server using the ",(0,s.jsx)(n.code,{children:"ghcr.io/moghtech/komodo-cli"})," image. This service will backup once and then exit, so the scheduled deployment should still happen using a Procedure or Action:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"services:\n  cli:\n    image: ghcr.io/moghtech/komodo-cli\n    command: km database backup -y\n    volumes:\n      - /path/to/komodo/backups:/backups\n    environment:\n      ## Database port must be reachable.\n      KOMODO_DATABASE_ADDRESS: komodo.example.com:27017\n      KOMODO_DATABASE_USERNAME: <db username>\n      KOMODO_DATABASE_PASSWORD: <db password>\n      KOMODO_DATABASE_DB_NAME: komodo\n      KOMODO_CLI_MAX_BACKUPS: 30 # set to your preference\n"})}),"\n",(0,s.jsx)(n.h2,{id:"restore",children:"Restore"}),"\n",(0,s.jsx)(n.p,{children:"The Komodo CLI handles database restores as well."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"services:\n  cli:\n    image: ghcr.io/moghtech/komodo-cli\n    ## Optionally specify a specific folder with `--restore-folder`,\n    ## otherwise restores the most recent backup.\n    command: km database restore -y # --restore-folder 2025-08-14_03-00-01\n    volumes:\n      # Same mount to backup files as above\n      - /path/to/komodo/backups:/backups\n    environment:\n      ## Database port must be reachable.\n      ## Note the different env vars needed compared to backup.\n      ## This is to prevent any accidental restores.\n      KOMODO_CLI_DATABASE_TARGET_ADDRESS: komodo.example.com:27017\n      KOMODO_CLI_DATABASE_TARGET_USERNAME: <db username>\n      KOMODO_CLI_DATABASE_TARGET_PASSWORD: <db password>\n      KOMODO_CLI_DATABASE_TARGET_DB_NAME: komodo-restore\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsx)(n.p,{children:'The restore process can be run multiple times with same backup files, and won\'t create any extra copies.\nHOWEVER it will not "clear" the target database beforehand. If the restore database is already populated,\nthose old documents will also remain. You may want to drop / delete the target database\nbefore restoring to it in this case.'})}),"\n",(0,s.jsx)(n.h2,{id:"consistency",children:"Consistency"}),"\n",(0,s.jsx)(n.p,{children:"So long as the backup process completes successfully, the files produces can always be restored\nno matter how active the Komodo instance is at the time of backup. However writes that happen during\nthe backup process, such as updates to the resource configuration, may or may not be included in the backup\ndepending on the timing."}),"\n",(0,s.jsxs)(n.p,{children:["While it should be rare that this causes any kind of issue when it comes to restoring, if your\nKomodo undergoes a lot of usage at all hours and you are worried about consistency,\nyou could consider ",(0,s.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/method/db.fsyncLock/#mongodb-method-db.fsyncLock",children:"locking"}),"\nMongo before the backup. Just make sure to ",(0,s.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/reference/method/db.fsyncUnlock/",children:"unlock"}),"\nthe database afterwards."]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>c});var t=o(6540);const s={},a=t.createContext(s);function r(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);