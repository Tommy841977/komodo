"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[774],{4252:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"resources/procedures","title":"Procedures and Actions","description":"For orchestrations involving multiple resources and executions,","source":"@site/docs/resources/procedures.md","sourceDirName":"resources","slug":"/resources/procedures","permalink":"/docs/resources/procedures","draft":false,"unlisted":false,"editUrl":"https://github.com/moghtech/komodo/tree/main/docsite/docs/resources/procedures.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Variables and Secrets","permalink":"/docs/resources/variables"},"next":{"title":"Sync Resources","permalink":"/docs/resources/sync-resources"}}');var r=o(4848),c=o(8453);const t={},a="Procedures and Actions",i={},d=[{value:"Procedures",id:"procedures",level:2},{value:"Batch Executions",id:"batch-executions",level:3},{value:"TOML Example",id:"toml-example",level:3},{value:"Actions",id:"actions",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"procedures-and-actions",children:"Procedures and Actions"})}),"\n",(0,r.jsxs)(n.p,{children:["For orchestrations involving multiple resources and executions,\nKomodo offers the ",(0,r.jsx)(n.code,{children:"Procedure"})," and ",(0,r.jsx)(n.code,{children:"Action"})," resource types."]}),"\n",(0,r.jsx)(n.h2,{id:"procedures",children:"Procedures"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Procedures"})," are compositions of many executions, such as ",(0,r.jsx)(n.code,{children:"RunBuild"})," and ",(0,r.jsx)(n.code,{children:"DeployStack"}),".\nThe executions are grouped into a series of ",(0,r.jsx)(n.code,{children:"Stages"}),", where each ",(0,r.jsx)(n.code,{children:"Stage"})," contains one or more executions\nto run ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"all at once"})}),". The Procedure will wait until all of the executions in a ",(0,r.jsx)(n.code,{children:"Stage"})," are complete before moving\non to the next stage. In short, the executions in a ",(0,r.jsx)(n.code,{children:"Stage"})," are run ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"in parallel"})}),", and the stages themselves are\nexecuted ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"sequentially"})}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"batch-executions",children:"Batch Executions"}),"\n",(0,r.jsxs)(n.p,{children:["Many executions have a ",(0,r.jsx)(n.code,{children:"Batch"})," version you can select, for example ",(0,r.jsx)(n.a,{href:"https://docs.rs/komodo_client/latest/komodo_client/api/execute/struct.BatchDeployStackIfChanged.html",children:(0,r.jsx)(n.strong,{children:"BatchDeployStackIfChanged"})}),". With this, you can match multiple Stacks by name\nusing ",(0,r.jsx)(n.a,{href:"https://docs.rs/wildcard/latest/wildcard",children:(0,r.jsx)(n.strong,{children:"wildcard syntax"})})," and ",(0,r.jsx)(n.a,{href:"https://docs.rs/regex/latest/regex",children:(0,r.jsx)(n.strong,{children:"regex"})}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"toml-example",children:"TOML Example"}),"\n",(0,r.jsxs)(n.p,{children:["Like all Resources, ",(0,r.jsx)(n.code,{children:"Procedures"})," have a TOML representation, and can be managed in ",(0,r.jsx)(n.code,{children:"ResourceSyncs"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-toml",children:'[[procedure]]\nname = "pull-deploy"\ndescription = "Pulls stack-repo, deploys stacks"\n\n[[procedure.config.stage]]\nname = "Pull Repo"\nexecutions = [\n  { execution.type = "PullRepo", execution.params.pattern = "stack-repo" },\n]\n\n[[procedure.config.stage]]\nname = "Deploy if changed"\nexecutions = [\n  # Uses the Batch version, witch matches many stacks by pattern\n  # This one matches all stacks prefixed with `foo-` (wildcard) and `bar-` (regex).\n  { execution.type = "BatchDeployStackIfChanged", execution.params.pattern = "foo-* , \\\\^bar-.*$\\\\" },\n]\n'})}),"\n",(0,r.jsx)(n.h2,{id:"actions",children:"Actions"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"Actions"})," give users the power of Typescript to write calls to the Komodo API."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, an ",(0,r.jsx)(n.code,{children:"Action"})," script like this will align the versions and branches of many ",(0,r.jsx)(n.code,{children:"Builds"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'const VERSION = "1.16.5";\nconst BRANCH = "dev/" + VERSION;\nconst APPS = ["core", "periphery"];\nconst ARCHS = ["x86", "aarch64"];\n\nawait komodo.write("UpdateVariableValue", {\n  name: "KOMODO_DEV_VERSION",\n  value: VERSION,\n});\nconsole.log("Updated KOMODO_DEV_VERSION to " + VERSION);\n\nfor (const app of APPS) {\n  for (const arch of ARCHS) {\n    const name = `komodo-${app}-${arch}-dev`;\n    await komodo.write("UpdateBuild", {\n      id: name,\n      config: {\n        version: VERSION as any,\n        branch: BRANCH,\n      },\n    });\n    console.log(\n      `Updated Build ${name} to version ${VERSION} and branch ${BRANCH}`,\n    );\n  }\n}\n\nfor (const arch of ARCHS) {\n  const name = `periphery-bin-${arch}-dev`;\n  await komodo.write("UpdateRepo", {\n    id: name,\n    config: {\n      branch: BRANCH,\n    },\n  });\n  console.log(`Updated Repo ${name} to branch ${BRANCH}`);\n}\n'})})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>t,x:()=>a});var s=o(6540);const r={},c=s.createContext(r);function t(e){const n=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);