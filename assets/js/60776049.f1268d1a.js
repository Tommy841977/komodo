"use strict";(self.webpackChunkdocsite=self.webpackChunkdocsite||[]).push([[440],{6649:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>t,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"resources/permissioning","title":"Permissioning","description":"Komodo has a granular, layer-based permissioning system to provide non-admin users access only to intended Resources.","source":"@site/docs/resources/permissioning.md","sourceDirName":"resources","slug":"/resources/permissioning","permalink":"/docs/resources/permissioning","draft":false,"unlisted":false,"editUrl":"https://github.com/moghtech/komodo/tree/main/docsite/docs/resources/permissioning.md","tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Configuring Webhooks","permalink":"/docs/resources/webhooks"},"next":{"title":"Ecosystem","permalink":"/docs/ecosystem"}}');var i=n(4848),o=n(8453);const c={},l="Permissioning",t={},d=[{value:"User Groups",id:"user-groups",level:2},{value:"Permission Levels",id:"permission-levels",level:2},{value:"Specific Permissions",id:"specific-permissions",level:2},{value:"Permissioning by Resource Type",id:"permissioning-by-resource-type",level:2},{value:"Administration",id:"administration",level:2}];function a(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"permissioning",children:"Permissioning"})}),"\n",(0,i.jsx)(s.p,{children:"Komodo has a granular, layer-based permissioning system to provide non-admin users access only to intended Resources."}),"\n",(0,i.jsx)(s.h2,{id:"user-groups",children:"User Groups"}),"\n",(0,i.jsxs)(s.p,{children:["While Komodo can assign permissions to specific users directly, it is recommended to instead ",(0,i.jsx)(s.strong,{children:"create User Groups and assign permissions to them"}),", as if they were a user."]}),"\n",(0,i.jsxs)(s.p,{children:["Users can then be ",(0,i.jsx)(s.strong,{children:"added to multiple User Groups"})," and they ",(0,i.jsx)(s.strong,{children:"inherit the group's permissions"}),", similar to linux permissions.\nThere is also an ",(0,i.jsx)(s.code,{children:"Everyone"})," mode for User Groups, if this is enabled then ",(0,i.jsx)(s.strong,{children:"all users implicitly gain the groups permissions"}),"."]}),"\n",(0,i.jsxs)(s.p,{children:["For permissioning at scale, users can define ",(0,i.jsx)(s.a,{href:"/docs/resources/sync-resources#user-group",children:(0,i.jsx)(s.strong,{children:"User Groups in Resource Syncs"})}),"."]}),"\n",(0,i.jsx)(s.h2,{id:"permission-levels",children:"Permission Levels"}),"\n",(0,i.jsx)(s.p,{children:"There are 4 permission levels a user / group can be given on a Resource:"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"None"}),". The user will not have any access to the resource. The user ",(0,i.jsx)(s.strong,{children:"will not see it in the GUI, and it will not show up if the user queries the Komodo API directly"}),". All attempts to view or update the resource will be blocked. This is the default for non-admins, unless using ",(0,i.jsx)(s.code,{children:"KOMODO_TRANSPARENT_MODE=true"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Read"}),". This is the first permission level that grants any access. It will enable the user to ",(0,i.jsx)(s.strong,{children:"see the resource in the GUI and read the configuration"}),". Any attempts to update configuration or trigger any action ",(0,i.jsx)(s.strong,{children:"will be blocked"}),".  Using ",(0,i.jsx)(s.code,{children:"KOMODO_TRANSPARENT_MODE=true"})," will make this level the base level on all resources, for all users."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Execute"}),". This level will allow the user to execute actions on the resource, ",(0,i.jsx)(s.strong,{children:"like send a build command"})," or ",(0,i.jsx)(s.strong,{children:"trigger a redeploy"}),". The user will still be blocked from updating configuration on the resource."]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"Write"}),". The user has full config write access to the resource, ",(0,i.jsx)(s.strong,{children:"they can execute any actions, update the configuration, and delete the resource"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"specific-permissions",children:"Specific Permissions"}),"\n",(0,i.jsx)(s.p,{children:"Permission levels alone are not quite enough to provide granular access control.\nSome features are additionally gated behind a specific permission for that feature."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"Logs"})}),": User can retrieve docker / docker compose logs on the associated resource.","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Valid on ",(0,i.jsx)(s.code,{children:"Server"}),", ",(0,i.jsx)(s.code,{children:"Stack"}),", ",(0,i.jsx)(s.code,{children:"Deployment"}),"."]}),"\n",(0,i.jsx)(s.li,{children:"For admins wanting this permission by default for all users with read permissions, see below on default user groups."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"Inspect"})}),':  User can "inspect" docker containers.',"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["Valid on ",(0,i.jsx)(s.code,{children:"Server"}),", ",(0,i.jsx)(s.code,{children:"Stack"}),", ",(0,i.jsx)(s.code,{children:"Deployment"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"On Servers"}),": Access to this api will expose all container environments on the given server,\nand can easily lead to secrets being leaked to unintended users if not protected."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"Terminal"})}),": User can access the associated resource's terminal.","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["If given on a ",(0,i.jsx)(s.code,{children:"Server"}),", this allows server level terminal access, and all container exec priviledges (Including attached ",(0,i.jsx)(s.code,{children:"Stacks"})," / ",(0,i.jsx)(s.code,{children:"Deployments"}),")."]}),"\n",(0,i.jsxs)(s.li,{children:["If given on a ",(0,i.jsx)(s.code,{children:"Stack"})," or ",(0,i.jsx)(s.code,{children:"Deployment"}),", this allows container exec terminal (even without ",(0,i.jsx)(s.code,{children:"Terminal"})," on ",(0,i.jsx)(s.code,{children:"Server"}),")."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"Attach"})}),': User can "attach" ',(0,i.jsx)(s.em,{children:"other resources"})," to the resource.","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["If given on a ",(0,i.jsx)(s.code,{children:"Server"}),", allows users to attach ",(0,i.jsx)(s.code,{children:"Stacks"}),", ",(0,i.jsx)(s.code,{children:"Deployments"}),", ",(0,i.jsx)(s.code,{children:"Repos"}),", and ",(0,i.jsx)(s.code,{children:"Builders"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:["If given on a ",(0,i.jsx)(s.code,{children:"Builder"}),", allows users to attach ",(0,i.jsx)(s.code,{children:"Builds"})," and ",(0,i.jsx)(s.code,{children:"Repos"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:["If given on a ",(0,i.jsx)(s.code,{children:"Build"}),", allows users to attach it to ",(0,i.jsx)(s.code,{children:"Deployments"}),"."]}),"\n",(0,i.jsxs)(s.li,{children:["If given on a ",(0,i.jsx)(s.code,{children:"Repo"}),", allows users to attach it to ",(0,i.jsx)(s.code,{children:"Stacks"}),", ",(0,i.jsx)(s.code,{children:"Builds"}),", and ",(0,i.jsx)(s.code,{children:"Resource Syncs"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"Processes"})}),": User can retrieve the full running process list on the ",(0,i.jsx)(s.code,{children:"Server"}),"."]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"permissioning-by-resource-type",children:"Permissioning by Resource Type"}),"\n",(0,i.jsx)(s.p,{children:"Users or User Groups can be given a base permission level on all Resources of a particular type, such as Stack.\nIn TOML form, this looks like:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-toml",children:'[[user_group]]\nname = "groupo"\nusers = ["mbecker20", "karamvirsingh98"]\nall.Build = "Execute" # <- Group members can run all builds (but not update config),\nall.Stack = { level = "Read", specific = ["Logs"] }    # <- And see all Stacks / logs (no deploy / update, inspect, or terminal access).\n'})}),"\n",(0,i.jsx)(s.p,{children:"A user / group can still be given a greater permission level on select resources:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-toml",children:'permissions = [\n  # Grant addition specific permission (Logs are already granted above)\n  { target.type = "Stack", target.id = "my-stack", level = "Execute", specific = ["Inspect", "Terminal"] },\n  # Use regex to match multiple resources, for example give john execute on all of their Stacks\n  { target.type = "Stack", target.id = "\\\\^john-(.+)$\\\\", level = "Execute" },\n]\n'})}),"\n",(0,i.jsx)(s.h2,{id:"administration",children:"Administration"}),"\n",(0,i.jsxs)(s.p,{children:["Users can be given Admin privileges by a ",(0,i.jsx)(s.code,{children:"Super Admin"})," (only the first user is given this status, set with ",(0,i.jsx)(s.code,{children:"super_admin: true"}),' on a User document in database). Super admins will see the "Make Admin" button when on a User page ',(0,i.jsx)(s.code,{children:"/users/${user_id}"}),"."]}),"\n",(0,i.jsx)(s.p,{children:"These users have unrestricted access to all Komodo Resources. Additionally, these users can update other (non-admin) user's permissions on resources."}),"\n",(0,i.jsxs)(s.p,{children:["Komodo admins are responsible for managing user accounts as well. When a user logs into Komodo for the first time, they will not immediately be granted access (this can changed with ",(0,i.jsx)(s.code,{children:"KOMODO_ENABLE_NEW_USERS=true"}),"). An admin must first ",(0,i.jsx)(s.strong,{children:"enable"})," the user, which can be done from the ",(0,i.jsx)(s.code,{children:"Users"})," tab on ",(0,i.jsx)(s.code,{children:"Settings"})," page. Users can also be ",(0,i.jsx)(s.strong,{children:"disabled"})," by an admin at any time, which blocks all their access to the GUI and API."]}),"\n",(0,i.jsx)(s.p,{children:"Users also have some configurable global permissions, these are:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"create server permission"}),"\n",(0,i.jsx)(s.li,{children:"create build permission"}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"Only users with these permissions (as well as admins) can add additional servers to Komodo, and can create additional builds, respectively."})]})}function h(e={}){const{wrapper:s}={...(0,o.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,s,n)=>{n.d(s,{R:()=>c,x:()=>l});var r=n(6540);const i={},o=r.createContext(i);function c(e){const s=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),r.createElement(o.Provider,{value:s},e.children)}}}]);